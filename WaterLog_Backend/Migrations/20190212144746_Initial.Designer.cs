// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WaterLog_Backend.Models;

namespace WaterLog_Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190212144746_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WaterLog_Backend.Models.ActionableEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LatestTimeStamp");

                    b.Property<DateTime>("OriginalTimeStamp");

                    b.Property<int>("SegmentId");

                    b.Property<string>("Severity");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("ActionableEvent");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.Property<int>("MonitorId");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId")
                        .IsUnique();

                    b.ToTable("Location");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Monitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Max_flow");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Monitor");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonitorId");

                    b.Property<DateTime>("TimesStamp");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MonitorId");

                    b.ToTable("Reading");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Monitor1Id");

                    b.Property<int>("Monitor2Id");

                    b.HasKey("Id");

                    b.HasIndex("Monitor2Id")
                        .IsUnique();

                    b.ToTable("Segment");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.SegmentEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventType");

                    b.Property<double>("FlowIn");

                    b.Property<double>("FlowOut");

                    b.Property<int>("SegmentId");

                    b.Property<DateTime>("TimeStamp");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("SegmentEvent");
                });

            modelBuilder.Entity("WaterLog_Backend.Models.ActionableEvent", b =>
                {
                    b.HasOne("WaterLog_Backend.Models.Segment", "Segment")
                        .WithMany("ActionableEvent")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Location", b =>
                {
                    b.HasOne("WaterLog_Backend.Models.Monitor", "Monitor")
                        .WithOne("Location")
                        .HasForeignKey("WaterLog_Backend.Models.Location", "MonitorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Reading", b =>
                {
                    b.HasOne("WaterLog_Backend.Models.Monitor", "Monitor")
                        .WithMany("Reading")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WaterLog_Backend.Models.Segment", b =>
                {
                    b.HasOne("WaterLog_Backend.Models.Monitor", "Monitor")
                        .WithOne("Segment")
                        .HasForeignKey("WaterLog_Backend.Models.Segment", "Monitor2Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WaterLog_Backend.Models.SegmentEvent", b =>
                {
                    b.HasOne("WaterLog_Backend.Models.Segment", "Segment")
                        .WithMany("SegmentEvent")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
